# This file is a Tcl script to test the code in the file tkText.c.
# This file is organized in the standard fashion for Tcl tests.
#
# Copyright (c) 1992-1994 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @(#) $Id: text.test,v 1.10.2.1 2000/08/05 23:53:15 hobbs Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

eval destroy [winfo child .]

# Create entries in the option database to be sure that geometry options
# like border width have predictable values.

option add *Text.borderWidth 2
option add *Text.highlightThickness 2
option add *Text.font {Courier -12}

text .t -width 20 -height 10
pack  .t -side top -expand y -fill both
update
#.t debug on
wm geometry . {}

# The statements below reset the main window;  it's needed if the window
# manager is mwm to make mwm forget about a previous minimum size setting.

wm withdraw .
wm minsize . 1 1
wm positionfrom . user
wm deiconify .

entry .t.e
.t.e insert end abcdefg
.t.e select from 0

.t insert 1.0 "Line 1
abcdefghijklm
12345
Line 4
bOy GIrl .#@? x_yz
!@#$%
Line 7"

catch {destroy .t2}
text .t2
set i 0
foreach test {
    {-background magenta magenta <gorp>}
    {-bd 4 4 foo}
    {-bg blue blue #xx}
    {-borderwidth 7 7 ++}
    {-cursor wait wait lousy}
    {-exportselection no 0 maybe}
    {-fg red red stupid}
    {-font {Courier 12}  {Courier 12}  {}}
    {-foreground green green bogus}
    {-height 5 5 bad}
    {-highlightbackground #123 #102030 bogus}
    {-highlightcolor #234 #203040 bogus}
    {-highlightthickness -2 0 bad}
    {-insertbackground green green <bogus>}
    {-insertborderwidth 45 45 bogus}
    {-insertofftime 100 100 2.4}
    {-insertontime 47 47 e1}
    {-insertwidth 2.3 2 47d}
    {-padx 3.4 3 2.4.}
    {-pady 82 82 bogus}
    {-relief raised raised bumpy}
    {-selectbackground #ffff01234567 #ffff01234567 bogus}
    {-selectborderwidth 21 21 3x}
    {-selectforeground yellow yellow #12345}
    {-spacing1 20 20 1.3x}
    {-spacing1 -5 0 bogus}
    {-spacing2 5 5 bogus}
    {-spacing2 -1 0 bogus}
    {-spacing3 20 20 bogus}
    {-spacing3 -10 0 bogus}
    {-state d disabled foo}
    {-tabs {1i 2i 3i 4i} {1i 2i 3i 4i} bad_tabs}
    {-width 73 73 2.4}
    {-wrap w word bad_wrap}
} {
    test text-1.[incr i] {text options} {
	puts $test
	set result {}
	lappend result [catch {.t2 configure [lindex $test 0] [lindex $test 3]}]
	.t2 configure [lindex $test 0] [lindex $test 1]
	lappend result [.t2 cget [lindex $test 0]]
    } [list 1 [lindex $test 2]]
}
test text-1.[incr i] {text options} {
    .t2 configure -takefocus "any old thing"
    .t2 cget -takefocus
} {any old thing}
test text-1.[incr i] {text options} {
    .t2 configure -xscrollcommand "x scroll command"
    .t2 configure -xscrollcommand
} {-xscrollcommand xScrollCommand ScrollCommand {} {x scroll command}}
test text-1.[incr i] {text options} {
    .t2 configure -yscrollcommand "test command"
    .t2 configure -yscrollcommand
} {-yscrollcommand yScrollCommand ScrollCommand {} {test command}}
test text-1.[incr i] {text options} {
    set result {}
    foreach i [.t2 configure] {
	lappend result [lindex $i 4]
    }
    set result
} {blue {} {} 7 watch 0 {} fixed #012 5 #123 #234 0 green 45 100 47 2 3 82 raised #ffff01234567 21 yellow 0 0 0 0 disabled {1i 2i 3i 4i} {any old thing} 73 word {x scroll command} {test command}}

test text-2.1 {Tk_TextCmd procedure} {
    list [catch {text} msg] $msg
} {1 {wrong # args: should be "text pathName ?options?"}}
test text-2.2 {Tk_TextCmd procedure} {
    list [catch {text foobar} msg] $msg
} {1 {bad window path name "foobar"}}
test text-2.3 {Tk_TextCmd procedure} {
    catch {destroy .t2}
    list [catch {text .t2 -gorp nofun} msg] $msg [winfo exists .t2]
} {1 {unknown option "-gorp"} 0}
test text-2.4 {Tk_TextCmd procedure} {
    catch {destroy .t2}
    list [catch {text .t2 -bd 2 -fg red} msg] $msg \
	[lindex [.t2 config -bd] 4] [lindex [.t2 config -fg] 4]
} {0 .t2 2 red}
if {$tcl_platform(platform) == "macintosh"} {
    set relief solid
} elseif {$tcl_platform(platform) == "windows"} {
    set relief flat
} else {
    set relief raised
}
test text-2.5 {Tk_TextCmd procedure} {
    catch {destroy .t2}
    text .t2
    .t2 tag cget sel -relief 
} $relief
test text-2.6 {Tk_TextCmd procedure} {
    catch {destroy .t2}
    list [text .t2] [winfo class .t2]
} {.t2 Text}

test text-3.1 {TextWidgetCmd procedure, basics} {
    list [catch {.t} msg] $msg
} {1 {wrong # args: should be ".t option ?arg arg ...?"}}
test text-3.2 {TextWidgetCmd procedure} {
    list [catch {.t gorp 1.0 z 1.2} msg] $msg
} {1 {bad option "gorp": must be cget, configure, object, jadd, elem, insert, tag, celem, index, delete, mark, compare, get, see, window, bbox, search, or debug}}

test text-4.1 {TextWidgetCmd procedure, "bbox" option} {
    list [catch {.t bbox} msg] $msg
} {1 {wrong # args: should be ".t bbox index"}}
test text-4.2 {TextWidgetCmd procedure, "bbox" option} {
    list [catch {.t bbox a b} msg] $msg
} {1 {wrong # args: should be ".t bbox index"}}
test text-4.3 {TextWidgetCmd procedure, "bbox" option} {
    list [catch {.t bbox bad_mark} msg] $msg
} {1 {bad text index "bad_mark"}}

test text-5.1 {TextWidgetCmd procedure, "cget" option} {
    list [catch {.t cget} msg] $msg
} {1 {wrong # args: should be ".t cget option"}}
test text-5.2 {TextWidgetCmd procedure, "cget" option} {
    list [catch {.t cget a b} msg] $msg
} {1 {wrong # args: should be ".t cget option"}}
test text-5.3 {TextWidgetCmd procedure, "cget" option} {
    list [catch {.t cget -gorp} msg] $msg
} {1 {unknown option "-gorp"}}
test text-5.4 {TextWidgetCmd procedure, "cget" option} {
    .t configure -bd 17
    .t cget -bd
} {17}
.t configure -bd [lindex [.t configure -bd] 3]

test text-6.1 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t compare a b} msg] $msg
} {1 {wrong # args: should be ".t compare index1 op index2"}}
test text-6.2 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t compare a b c d} msg] $msg
} {1 {wrong # args: should be ".t compare index1 op index2"}}
test text-6.3 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t compare @x == 1.0} msg] $msg
} {1 {bad text index "@x"}}
test text-6.4 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t compare 1.0 < @y} msg] $msg
} {1 {bad text index "@y"}}
test text-6.5 {TextWidgetCmd procedure, "compare" option} {
    list [.t compare 1.1 < 1.0] [.t compare 1.1 < 1.1] [.t compare 1.1 < 1.2]
} {0 0 1}
test text-6.6 {TextWidgetCmd procedure, "compare" option} {
    list [.t compare 1.1 <= 1.0] [.t compare 1.1 <= 1.1] [.t compare 1.1 <= 1.2]
} {0 1 1}
test text-6.7 {TextWidgetCmd procedure, "compare" option} {
    list [.t compare 1.1 == 1.0] [.t compare 1.1 == 1.1] [.t compare 1.1 == 1.2]
} {0 1 0}
test text-6.8 {TextWidgetCmd procedure, "compare" option} {
    list [.t compare 1.1 >= 1.0] [.t compare 1.1 >= 1.1] [.t compare 1.1 >= 1.2]
} {1 1 0}
test text-6.9 {TextWidgetCmd procedure, "compare" option} {
    list [.t compare 1.1 > 1.0] [.t compare 1.1 > 1.1] [.t compare 1.1 > 1.2]
} {1 0 0}
test text-6.10 {TextWidgetCmd procedure, "compare" option} {
    list [.t com 1.1 != 1.0] [.t compare 1.1 != 1.1] [.t compare 1.1 != 1.2]
} {1 0 1}
test text-6.11 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t compare 1.0 <x 1.2} msg] $msg
} {1 {bad comparison operator "<x": must be <, <=, ==, >=, >, or !=}}
test text-6.12 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t compare 1.0 >> 1.2} msg] $msg
} {1 {bad comparison operator ">>": must be <, <=, ==, >=, >, or !=}}
test text-6.13 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t compare 1.0 z 1.2} msg] $msg
} {1 {bad comparison operator "z": must be <, <=, ==, >=, >, or !=}}
test text-6.14 {TextWidgetCmd procedure, "compare" option} {
    list [catch {.t co 1.0 z 1.2} msg] $msg
} {1 {ambiguous option "co": must be cget, configure, object, jadd, elem, insert, tag, celem, index, delete, mark, compare, get, see, window, bbox, search, or debug}}

# "configure" option is already covered above

test text-7.1 {TextWidgetCmd procedure, "debug" option} {
    list [catch {.t debug 0 1} msg] $msg
} {1 {wrong # args: should be ".t debug boolean"}}
test text-7.2 {TextWidgetCmd procedure, "debug" option} {
    list [catch {.t de 0 1} msg] $msg
} {1 {ambiguous option "de": must be cget, configure, object, jadd, elem, insert, tag, celem, index, delete, mark, compare, get, see, window, bbox, search, or debug}}
test text-7.3 {TextWidgetCmd procedure, "debug" option} {
    .t debug true
    .t deb
} 1
test text-7.4 {TextWidgetCmd procedure, "debug" option} {
    .t debug false
    .t debug
} 0
# .t debug

test text-8.1 {TextWidgetCmd procedure, "delete" option} {
    list [catch {.t delete} msg] $msg
} {1 {wrong # args: should be ".t delete index1 ?index2?"}}
test text-8.2 {TextWidgetCmd procedure, "delete" option} {
    list [catch {.t delete a b c} msg] $msg
} {1 {wrong # args: should be ".t delete index1 ?index2?"}}
test text-8.3 {TextWidgetCmd procedure, "delete" option} {
    list [catch {.t delete @x 2.2} msg] $msg
} {1 {bad text index "@x"}}
test text-8.4 {TextWidgetCmd procedure, "delete" option} {
    list [catch {.t delete 2.3 @y} msg] $msg
} {1 {bad text index "@y"}}
test text-8.5 {TextWidgetCmd procedure, "delete" option} {
    .t con -state disabled
    .t delete 2.3
    .t g 2.0 2.end
} abcdefghijklm
.t con -state normal
test text-8.6 {TextWidgetCmd procedure, "delete" option} {
    .t delete 2.3
    .t get 2.0 2.end
} abcefghijklm
test text-8.7 {TextWidgetCmd procedure, "delete" option} {
    .t delete 2.1 2.3
    .t get 2.0 2.end
} aefghijklm

test text-9.1 {TextWidgetCmd procedure, "get" option} {
    list [catch {.t get} msg] $msg
} {1 {wrong # args: should be ".t get index1 ?index2?"}}
test text-9.2 {TextWidgetCmd procedure, "get" option} {
    list [catch {.t get a b c} msg] $msg
} {1 {wrong # args: should be ".t get index1 ?index2?"}}
test text-9.3 {TextWidgetCmd procedure, "get" option} {
    list [catch {.t get @q 3.1} msg] $msg
} {1 {bad text index "@q"}}
test text-9.4 {TextWidgetCmd procedure, "get" option} {
    list [catch {.t get 3.1 @r} msg] $msg
} {1 {bad text index "@r"}}
test text-9.5 {TextWidgetCmd procedure, "get" option} {
    .t get 5.7 5.3
} {}
test text-9.6 {TextWidgetCmd procedure, "get" option} {
    .t get 5.3 5.5
} { G}
test text-9.7 {TextWidgetCmd procedure, "get" option} {
    .t get 5.3 end
} { GIrl .#@? x_yz
!@#$%
Line 7
}
.t mark set a 5.3
.t mark set b 5.3
.t mark set c 5.5
test text-9.8 {TextWidgetCmd procedure, "get" option} {
    .t get 5.2 5.7
} {y GIr}
test text-9.9 {TextWidgetCmd procedure, "get" option} {
    .t get 5.2
} {y}
test text-9.10 {TextWidgetCmd procedure, "get" option} {
    .t get 5.2 5.4
} {y }

test text-10.1 {TextWidgetCmd procedure, "index" option} {
    list [catch {.t index} msg] $msg
} {1 {wrong # args: should be ".t index index"}}
test text-10.2 {TextWidgetCmd procedure, "index" option} {
    list [catch {.t ind a b} msg] $msg
} {1 {wrong # args: should be ".t index index"}}
test text-10.3 {TextWidgetCmd procedure, "index" option} {
    list [catch {.t in a b} msg] $msg
} {1 {ambiguous option "in": must be cget, configure, object, jadd, elem, insert, tag, celem, index, delete, mark, compare, get, see, window, bbox, search, or debug}}
test text-10.4 {TextWidgetCmd procedure, "index" option} {
    list [catch {.t index @xyz} msg] $msg
} {1 {bad text index "@xyz"}}
test text-10.5 {TextWidgetCmd procedure, "index" option} {
    .t index 1.2
} 1.2

test text-11.1 {TextWidgetCmd procedure, "insert" option} {
    list [catch {.t insert 1.2} msg] $msg
} {1 {wrong # args: should be ".t insert index chars ?tagList chars tagList ...?"}}
test text-11.2 {TextWidgetCmd procedure, "insert" option} {
    .t config -state disabled
    .t insert 1.2 xyzzy
    .t get 1.0 1.end
} {Line 1}
.t config -state normal
test text-11.3 {TextWidgetCmd procedure, "insert" option} {
    .t insert 1.2 xyzzy
    .t get 1.0 1.end
} {Lixyzzyne 1}
test text-11.4 {TextWidgetCmd procedure, "insert" option} {
    .t delete 1.0 end
    .t insert 1.0 "Sample text" x
    .t tag ranges x
} {1.0 1.11}
test text-11.5 {TextWidgetCmd procedure, "insert" option} {
    .t delete 1.0 end
    .t insert 1.0 "Sample text" x
    .t insert 1.2 "XYZ" y
    list [.t tag ranges x] [.t tag ranges y]
} {{1.0 1.2 1.5 1.14} {1.2 1.5}}
test text-11.6 {TextWidgetCmd procedure, "insert" option} {
    .t delete 1.0 end
    .t insert 1.0 "Sample text" {x y z}
    list [.t tag ranges x] [.t tag ranges y] [.t tag ranges z]
} {{1.0 1.11} {1.0 1.11} {1.0 1.11}}
test text-11.7 {TextWidgetCmd procedure, "insert" option} {
    .t delete 1.0 end
    .t insert 1.0 "Sample text" {x y z}
    .t insert 1.3 "A" {a b z}
    list [.t tag ranges a] [.t tag ranges b] [.t tag ranges x] [.t tag ranges y] [.t tag ranges z]
} {{1.3 1.4} {1.3 1.4} {1.0 1.3 1.4 1.12} {1.0 1.3 1.4 1.12} {1.0 1.12}}
test text-11.8 {TextWidgetCmd procedure, "insert" option} {
    .t delete 1.0 end
    list [catch {.t insert 1.0 "Sample text" "a \{b"} msg] $msg
} {1 {unmatched open brace in list}}
test text-11.9 {TextWidgetCmd procedure, "insert" option} {
    .t delete 1.0 end
    .t insert 1.0 "First" bold " " {} second "x y z" " third"
    list [.t get 1.0 1.end] [.t tag ranges bold] [.t tag ranges x] \
	    [.t tag ranges y] [.t tag ranges z]
} {{First second third} {1.0 1.5} {1.6 1.12} {1.6 1.12} {1.6 1.12}}
test text-11.10 {TextWidgetCmd procedure, "insert" option} {
    .t delete 1.0 end
    .t insert 1.0 "First" bold " second" silly
    list [.t get 1.0 1.end] [.t tag ranges bold] [.t tag ranges silly]
} {{First second} {1.0 1.5} {1.5 1.12}}

# Mark, scan, search, see, tag, window, xview, and yview actions are tested elsewhere.

test text-12.1 {ConfigureText procedure} {
    list [catch {.t2 configure -state foobar} msg] $msg
} {1 {bad state value "foobar": must be normal or disabled}}
test text-12.2 {ConfigureText procedure} {
    .t2 configure -spacing1 -2 -spacing2 1 -spacing3 1
    list [.t2 cget -spacing1] [.t2 cget -spacing2] [.t2 cget -spacing3]
} {0 1 1}
test text-12.3 {ConfigureText procedure} {
    .t2 configure -spacing1 1 -spacing2 -1 -spacing3 1
    list [.t2 cget -spacing1] [.t2 cget -spacing2] [.t2 cget -spacing3]
} {1 0 1}
test text-12.4 {ConfigureText procedure} {
    .t2 configure -spacing1 1 -spacing2 1 -spacing3 -3
    list [.t2 cget -spacing1] [.t2 cget -spacing2] [.t2 cget -spacing3]
} {1 1 0}
test text-12.5 {ConfigureText procedure} {
    set x [list [catch {.t2 configure -tabs {30 foo}} msg] $msg $errorInfo]
    .t2 configure -tabs {10 20 30}
    set x
} {1 {bad tab alignment "foo": must be left, right, center, or numeric} {bad tab alignment "foo": must be left, right, center, or numeric
    (while processing -tabs option)
    invoked from within
".t2 configure -tabs {30 foo}"}}
test text-12.6 {ConfigureText procedure} {
    .t2 configure -tabs {10 20 30}
    .t2 configure -tabs {}
    .t2 cget -tabs
} {}
test text-12.7 {ConfigureText procedure} {
    list [catch {.t2 configure -wrap bogus} msg] $msg
} {1 {bad wrap mode "bogus": must be char, none, or word}}
test text-12.8 {ConfigureText procedure} {
    .t2 configure -selectborderwidth 17 -selectforeground #332211 \
	    -selectbackground #abc
    list [lindex [.t2 tag config sel -borderwidth] 4] \
	[lindex [.t2 tag config sel -foreground] 4] \
	[lindex [.t2 tag config sel -background] 4]
} {17 #332211 #abc}
test text-12.9 {ConfigureText procedure} {
    .t2 configure -selectborderwidth {}
    .t2 tag cget sel -borderwidth
} {}
test text-12.10 {ConfigureText procedure} {
    list [catch {.t2 configure -selectborderwidth foo} msg] $msg
} {1 {bad screen distance "foo"}}
test text-12.11 {ConfigureText procedure} {
    catch {destroy .t2}
    .t.e select to 2
    text .t2 -exportselection 1
    selection get
} {ab}
test text-12.12 {ConfigureText procedure} {
    catch {destroy .t2}
    .t.e select to 2
    text .t2 -exportselection 0
    .t2 insert insert 1234657890
    .t2 tag add sel 1.0 1.4
    selection get
} {ab}
test text-12.13 {ConfigureText procedure} {
    catch {destroy .t2}
    .t.e select to 1
    text .t2 -exportselection 1
    .t2 insert insert 1234657890
    .t2 tag add sel 1.0 1.4
    selection get
} {1234}
test text-12.14 {ConfigureText procedure} {
    catch {destroy .t2}
    .t.e select to 1
    text .t2 -exportselection 0
    .t2 insert insert 1234657890
    .t2 tag add sel 1.0 1.4
    .t2 configure -exportselection 1
    selection get
} {1234}
test text-12.15 {ConfigureText procedure} {
    catch {destroy .t2}
    text .t2 -exportselection 1
    .t2 insert insert 1234657890
    .t2 tag add sel 1.0 1.4
    set result [selection get]
    .t2 configure -exportselection 0
    lappend result [catch {selection get} msg] $msg
} {1234 1 {PRIMARY selection doesn't exist or form "STRING" not defined}}
test text-12.16 {ConfigureText procedure} {fonts} {
    # This test is non-portable because the window size will vary depending
    # on the font size, which can vary.

    catch {destroy .t2}
    toplevel .t2
    text .t2.t -width 20 -height 10
    pack  .t2.t -side top
    wm geometry .t2 +0+0
    update
    wm geometry .t2
} {150x140+0+0}
test text-12.17 {ConfigureText procedure} {
    # This test was failing Windows because the title bar on .t2
    # was a certain minimum size and it was interfering with the size
    # requested by the -setgrid.  The "overrideredirect" gets rid of the
    # titlebar so the toplevel can shrink to the appropriate size.

    catch {destroy .t2}
    toplevel .t2
    wm overrideredirect .t2 1
    text .t2.t -width 20 -height 10 -setgrid 1
    pack  .t2.t -side top
    wm geometry .t2 +0+0
    update
    wm geometry .t2
} {20x10+0+0}
test text-12.18 {ConfigureText procedure} {
    # This test was failing on Windows because the title bar on .t2
    # was a certain minimum size and it was interfering with the size
    # requested by the -setgrid.  The "overrideredirect" gets rid of the
    # titlebar so the toplevel can shrink to the appropriate size.

    catch {destroy .t2}
    toplevel .t2
    wm overrideredirect .t2 1
    text .t2.t -width 20 -height 10 -setgrid 1
    pack .t2.t -side top
    wm geometry .t2 +0+0
    update
    set result [wm geometry .t2]
    wm geometry .t2 15x8
    update
    lappend result [wm geometry .t2]
    .t2.t configure -wrap word
    update
    lappend result [wm geometry .t2]
} {20x10+0+0 15x8+0+0 15x8+0+0}

test text-13.1 {TextWorldChanged procedure, spacing options} fonts {
    catch {destroy .t2}
    text .t2 -width 20 -height 10
    set result [winfo reqheight .t2]
    .t2 configure -spacing1 2
    lappend result [winfo reqheight .t2]
    .t2  configure -spacing3 1
    lappend result [winfo reqheight .t2]
    .t2 configure -spacing1 0
    lappend result [winfo reqheight .t2]
} {140 160 170 150}

test text-14.1 {TextEventProc procedure} {
    text .tx1 -bg #543210
    rename .tx1 .tx2
    set x {}
    lappend x [winfo exists .tx1]
    lappend x [.tx2 cget -bg]
    destroy .tx1
    lappend x [info command .tx*] [winfo exists .tx1] [winfo exists .tx2]
} {1 #543210 {} 0 0}

test text-15.1 {TextCmdDeletedProc procedure} {
    text .tx1
    rename .tx1 {}
    list [info command .tx*] [winfo exists .tx1]
} {{} 0}
test text-15.2 {TextCmdDeletedProc procedure, disabling -setgrid} fonts {
    catch {destroy .top}
    toplevel .top
    wm geom .top +0+0
    text .top.t -setgrid 1 -width 20 -height 10
    pack .top.t
    update
    set x [wm geometry .top]
    rename .top.t {}
    update
    lappend x [wm geometry .top]
    destroy .top
    set x
} {20x10+0+0 150x140+0+0}

test text-16.1 {InsertChars procedure} {
    catch {destroy .t2}
    text .t2
    .t2 insert 2.0 abcd\n
    .t2 get 1.0 end
} {abcd

}
test text-16.2 {InsertChars procedure} {
    catch {destroy .t2}
    text .t2
    .t2 insert 1.0 abcd\n
    .t2 insert end 123\n
    .t2 get 1.0 end
} {abcd
123

}
test text-16.3 {InsertChars procedure} {
    catch {destroy .t2}
    text .t2
    .t2 insert 1.0 abcd\n
    .t2 insert 10.0 123
    .t2 get 1.0 end
} {abcd
123
}
test text-16.4 {InsertChars procedure, inserting on top visible line} {
    catch {destroy .t2}
    text .t2 -width 20 -height 4 -wrap word
    pack .t2
    .t2 insert insert "Now is the time for all great men to come to the "
    .t2 insert insert "aid of their party.\n"
    .t2 insert insert "Now is the time for all great men.\n"
    .t2 see end
    update
    .t2 insert 1.0 "Short\n"
    .t2 index @0,0
} {2.56}
test text-16.5 {InsertChars procedure, inserting on top visible line} {
    catch {destroy .t2}
    text .t2 -width 20 -height 4 -wrap word
    pack .t2
    .t2 insert insert "Now is the time for all great men to come to the "
    .t2 insert insert "aid of their party.\n"
    .t2 insert insert "Now is the time for all great men.\n"
    .t2 see end
    update
    .t2 insert 1.55 "Short\n"
    .t2 index @0,0
} {2.0}
test text-16.6 {InsertChars procedure, inserting on top visible line} {
    catch {destroy .t2}
    text .t2 -width 20 -height 4 -wrap word
    pack .t2
    .t2 insert insert "Now is the time for all great men to come to the "
    .t2 insert insert "aid of their party.\n"
    .t2 insert insert "Now is the time for all great men.\n"
    .t2 see end
    update
    .t2 insert 1.56 "Short\n"
    .t2 index @0,0
} {1.56}
test text-16.7 {InsertChars procedure, inserting on top visible line} {
    catch {destroy .t2}
    text .t2 -width 20 -height 4 -wrap word
    pack .t2
    .t2 insert insert "Now is the time for all great men to come to the "
    .t2 insert insert "aid of their party.\n"
    .t2 insert insert "Now is the time for all great men.\n"
    .t2 see end
    update
    .t2 insert 1.57 "Short\n"
    .t2 index @0,0
} {1.56}
catch {destroy .t2}

proc setup {} {
    .t delete 1.0 end
    .t insert 1.0 "Line 1
abcde
12345
Line 4"
}

.t delete 1.0 end
test text-17.1 {DeleteChars procedure} {
    .t get 1.0 end
} {
}
test text-17.2 {DeleteChars procedure} {
    list [catch {.t delete foobar} msg] $msg
} {1 {bad text index "foobar"}}
test text-17.3 {DeleteChars procedure} {
    list [catch {.t delete 1.0 lousy} msg] $msg
} {1 {bad text index "lousy"}}
test text-17.4 {DeleteChars procedure} {
    setup
#    .t delete 2.1
    .t get 1.0 end
} {Line 1
acde
12345
Line 4
}
test text-17.5 {DeleteChars procedure} {
    setup
    .t delete 2.3
    .t get 1.0 end
} {Line 1
abce
12345
Line 4
}
test text-17.6 {DeleteChars procedure} {
    setup
    .t delete 2.end
    .t get 1.0 end
} {Line 1
abcde12345
Line 4
}
test text-17.7 {DeleteChars procedure} broken {
    setup
    .t tag add sel 4.2 end
    .t delete 4.2 end
    list [.t tag ranges sel] [.t get 1.0 end]
} {{} {Line 1
abcde
12345
Li
}}
test text-17.8 {DeleteChars procedure} {
    setup
    .t tag add sel 1.0 end
    .t delete 4.0 end
    list [.t tag ranges sel] [.t get 1.0 end]
} {{1.0 3.5} {Line 1
abcde
12345
}}
test text-17.9 {DeleteChars procedure} {
    setup
    .t delete 2.2 2.2
    .t get 1.0 end
} {Line 1
abcde
12345
Line 4
}
test text-17.10 {DeleteChars procedure} {
    setup
    .t delete 2.3 2.1
    .t get 1.0 end
} {Line 1
abcde
12345
Line 4
}
test text-17.11 {DeleteChars procedure} {
    catch {destroy .t2}
    toplevel .t2
    text .t2.t -width 20 -height 5
    pack .t2.t -side top
    wm geometry .t2 +0+0
    .t2.t insert 1.0 "abc\n123\nx\ny\nz\nq\nr\ns"
    update
    .t2.t delete 1.0 3.0
    list [.t2.t index @0,0] [.t2.t get @0,0]
} {1.0 x}
test text-17.12 {DeleteChars procedure} {
    catch {destroy .t2}
    toplevel .t2
    text .t2.t -width 20 -height 5
    pack .t2.t -side top
    wm geometry .t2 +0+0
    .t2.t insert 1.0 "abc\n123\nx\ny\nz\nq\nr\ns"
    .t2.t yview 3.0
    update
    .t2.t delete 2.0 4.0
    list [.t2.t index @0,0] [.t2.t get @0,0]
} {2.0 y}
catch {destroy .t2}
toplevel .t2
text .t2.t -width 1 -height 10 -wrap char
frame .t2.f -width 200 -height 20 -relief raised -bd 2
pack .t2.f .t2.t -side left
wm geometry .t2 +0+0
update
test text-17.13 {DeleteChars procedure, updates affecting topIndex} {
    .t2.t delete 1.0 end
    .t2.t insert end "abcde\n12345\nqrstuv"
    .t2.t yview 2.1
    .t2.t delete 1.4 2.3
    .t2.t index @0,0
} {1.2}
test text-17.14 {DeleteChars procedure, updates affecting topIndex} {
    .t2.t delete 1.0 end
    .t2.t insert end "abcde\n12345\nqrstuv"
    .t2.t yview 2.1
    .t2.t delete 2.3 2.4
    .t2.t index @0,0
} {2.0}
test text-17.15 {DeleteChars procedure, updates affecting topIndex} {
    .t2.t delete 1.0 end
    .t2.t insert end "abcde\n12345\nqrstuv"
    .t2.t yview 1.3
    .t2.t delete 1.0 1.2
    .t2.t index @0,0
} {1.1}
test text-17.16 {DeleteChars procedure, updates affecting topIndex} {
    catch {destroy .t2}
    toplevel .t2
    text .t2.t -width 6 -height 10 -wrap word
    frame .t2.f -width 200 -height 20 -relief raised -bd 2
    pack .t2.f .t2.t -side left
    wm geometry .t2 +0+0
    update
    .t2.t insert end "abc def\n01 2345 678 9101112\nLine 3\nLine 4\nLine 5\n6\n7\n8\n"
    .t2.t yview 2.4
    .t2.t delete 2.5
    set x [.t2.t index @0,0]
    .t2.t delete 2.5
    list $x [.t2.t index @0,0]
} {2.3 2.0}
.t delete 1.0 end
foreach i {a b c d e f g h i j k l m n o p q r s t u v w x y z} {
    .t insert end $i.0$i.1$i.2$i.3$i.4\n
}
puts 18.1
test text-18.1 {TextFetchSelection procedure} {
    .t tag add sel 1.3 3.4
    selection get
} {a.1a.2a.3a.4
b.0b.1b.2b.3b.4
c.0c}
test text-18.2 {TextFetchSelection procedure} {
    .t tag add x 1.2
    .t tag add x 1.4
    .t tag add x 2.0
    .t tag add x 2.3
    .t tag remove sel 1.0 end
    .t tag add sel 1.0 3.4
    selection get
} {a.0a.1a.2a.3a.4
b.0b.1b.2b.3b.4
c.0c}
test text-18.3 {TextFetchSelection procedure} {
    .t tag remove sel 1.0 end
    .t tag add sel 13.3
    selection get
} {m}
test text-18.4 {TextFetchSelection procedure} {
    .t tag remove x 1.0 end
    .t tag add sel 1.0 3.4
    .t tag remove sel 1.0 end
    .t tag add sel 1.2 1.5
    .t tag add sel 2.4 3.1
    .t tag add sel 10.0 10.end
    .t tag add sel 13.3
    selection get
} {0a..1b.2b.3b.4
cj.0j.1j.2j.3j.4m}
set x ""
for {set i 1} {$i < 200} {incr i} {
    append x "This is line $i, padded to just about 53 characters.\n"
}
test text-18.5 {TextFetchSelection procedure, long selections} {
    .t delete 1.0 end
    .t insert end $x
    .t tag add sel 1.0 end
    selection get
} $x\n

test text-19.1 {TkTextLostSelection procedure} {unixOnly} {
    catch {destroy .t2}
    text .t2
    .t2 insert 1.0 "abc\ndef\nghijk\n1234"
    .t2 tag add sel 1.2 3.3
    .t.e select to 1
    .t2 tag ranges sel
} {}
test text-19.2 {TkTextLostSelection procedure} {macOrPc} {
    catch {destroy .t2}
    text .t2
    .t2 insert 1.0 "abc\ndef\nghijk\n1234"
    .t2 tag add sel 1.2 3.3
    .t.e select to 1
    .t2 tag ranges sel
} {1.2 3.3}
catch {destroy .t2}
test text-19.3 {TkTextLostSelection procedure} {
    catch {destroy .t2}
    text .t2
    .t2 insert 1.0 "abcdef\nghijk\n1234"
    .t2 tag add sel 1.0 1.3
    set x [selection get]
    selection clear
    lappend x [catch {selection get} msg] $msg
    .t2 tag add sel 1.0 1.3
    lappend x [selection get]
} {abc 1 {PRIMARY selection doesn't exist or form "STRING" not defined} abc}

.t delete 1.0 end
# cleanup
::tcltest::cleanupTests
return













